{"version":3,"sources":["ZipcodeForm.js","Forecast.js","App.js","serviceWorker.js","index.js"],"names":["ZipcodeForm","props","react_default","a","createElement","Form_default","onSubmit","loadForecast","Group","as","Row","controlId","Col_default","md","Control","type","placeholder","name","required","Button_default","variant","Forecast","hasData","forecastData","city","Table_default","striped","hover","className","map","day","dt_txt","kelvinToFahrenheit","main","temp","pressure","App","getForecast","_callee","e","zipcode","api_call","response","regenerator_default","wrap","_context","prev","next","preventDefault","target","elements","value","fetch","concat","sent","json","_this","setState","list","error","isLoaded","console","log","t0","window","alert","stop","state","undefined","Container_default","Row_default","src_ZipcodeForm","this","src_Forecast","React","Component","Boolean","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"2VA+BeA,EAzBK,SAACC,GACjB,OASIC,EAAAC,EAAAC,cAACC,EAAAF,EAAD,CAAMG,SAAUL,EAAMM,cAClBL,EAAAC,EAAAC,cAACC,EAAAF,EAAKK,MAAN,CAAYC,GAAIC,IAAKC,UAAU,eAC3BT,EAAAC,EAAAC,cAACQ,EAAAT,EAAD,CAAKU,GAAG,KACJX,EAAAC,EAAAC,cAACC,EAAAF,EAAKW,QAAN,CAAcC,KAAK,OAAOC,YAAY,gBAAgBC,KAAK,UAAUC,UAAQ,KAEjFhB,EAAAC,EAAAC,cAACQ,EAAAT,EAAD,CAAKU,GAAG,KACJX,EAAAC,EAAAC,cAACe,EAAAhB,EAAD,CAAQY,KAAK,SAASK,QAAQ,WAA9B,qDC0BLC,EA5CE,SAACpB,GACd,IAAIqB,GAAU,EAId,OAHIrB,EAAMsB,eACND,GAAU,GAGVpB,EAAAC,EAAAC,cAAA,WACIF,EAAAC,EAAAC,cAAA,UAAKH,EAAMuB,MACXtB,EAAAC,EAAAC,cAACqB,EAAAtB,EAAD,CAAOuB,SAAO,EAACC,OAAK,GAChBzB,EAAAC,EAAAC,cAAA,SAAOwB,UAAU,cACb1B,EAAAC,EAAAC,cAAA,UACIF,EAAAC,EAAAC,cAAA,kBACAF,EAAAC,EAAAC,cAAA,kBACAF,EAAAC,EAAAC,cAAA,wBAGRF,EAAAC,EAAAC,cAAA,aACKkB,EACGrB,EAAMsB,aAAaM,IAAI,SAAAC,GAAG,OACtB5B,EAAAC,EAAAC,cAAA,UACIF,EAAAC,EAAAC,cAAA,UAAK0B,EAAIC,QACT7B,EAAAC,EAAAC,cAAA,UAAK4B,IAAmBF,EAAIG,KAAKC,MAAjC,UACAhC,EAAAC,EAAAC,cAAA,UAAK0B,EAAIG,KAAKE,aAIlBjC,EAAAC,EAAAC,cAAA,eCqCbgC,6MAzDbC,kDAAc,SAAAC,EAAOC,GAAP,IAAAC,EAAAC,EAAAC,EAAA,OAAAC,EAAAxC,EAAAyC,KAAA,SAAAC,GAAA,cAAAA,EAAAC,KAAAD,EAAAE,MAAA,cAAAF,EAAAC,KAAA,EAEVP,EAAES,iBACY,mCACRR,EAAUD,EAAEU,OAAOC,SAASV,QAAQW,MAJhCN,EAAAE,KAAA,EAKaK,MAAK,wDAAAC,OAAyDb,EAAzD,cAAAa,OAFd,qCAHJ,cAKJZ,EALII,EAAAS,KAAAT,EAAAE,KAAA,EAMaN,EAASc,OANtB,OAMJb,EANIG,EAAAS,KAONd,EACFgB,EAAKC,SAAS,CACZjC,KAAMkB,EAASlB,KAAKP,KACpByC,KAAMhB,EAASgB,KACfC,MAAO,GACPC,UAAU,IAIZJ,EAAKC,SAAS,CACZE,MAAO,0BACPC,UAAU,IAGdC,QAAQC,IAAIpB,EAASgB,MArBXb,EAAAE,KAAA,iBAAAF,EAAAC,KAAA,GAAAD,EAAAkB,GAAAlB,EAAA,SAuBVW,EAAKC,SAAS,CACZE,MAAO,yCACPC,UAAU,IAEZI,OAAOC,MAAM,2CA3BH,yBAAApB,EAAAqB,SAAA5B,EAAA,0EAgCd6B,MAAQ,CACN3C,UAAM4C,EACNV,UAAMU,EACNT,WAAOS,EACPR,UAAU,2EAIV,OACE1D,EAAAC,EAAAC,cAACiE,EAAAlE,EAAD,KACED,EAAAC,EAAAC,cAACkE,EAAAnE,EAAD,KACED,EAAAC,EAAAC,cAACQ,EAAAT,EAAD,CAAKU,GAAG,MACNX,EAAAC,EAAAC,cAACmE,EAAD,CAAahE,aAAciE,KAAKnC,eAEjCmC,KAAKL,MAAMP,SACV1D,EAAAC,EAAAC,cAACQ,EAAAT,EAAD,CAAKU,GAAG,MACNX,EAAAC,EAAAC,cAACqE,EAAD,CAAUjD,KAAMgD,KAAKL,MAAM3C,KAAMD,aAAciD,KAAKL,MAAMT,QAEzDxD,EAAAC,EAAAC,cAACQ,EAAAT,EAAD,CAAKU,GAAG,gBAnDL6D,IAAMC,WCGJC,QACW,cAA7BZ,OAAOa,SAASC,UAEe,UAA7Bd,OAAOa,SAASC,UAEhBd,OAAOa,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO/E,EAAAC,EAAAC,cAAC8E,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.a3074fc7.chunk.js","sourcesContent":["import React from 'react';\r\nimport Form from 'react-bootstrap/Form'\r\nimport Button from 'react-bootstrap/Button'\r\nimport Row from 'react-bootstrap/Row';\r\nimport Col from 'react-bootstrap/Col';\r\n\r\nconst ZipcodeForm = (props) => {\r\n    return (\r\n        // <form onSubmit={props.loadForecast} className=\"form row\">\r\n        //     <div className=\"col\">\r\n        //         <input type=\"text\" name=\"zipcode\" className=\"form-control\" placeholder=\"Enter Zipcode\" required/>\r\n        //     </div>\r\n        //     <div className=\"col\">\r\n        //         <button className=\"btn btn-primary\">Get Weather</button>\r\n        //     </div>\r\n        // </form>\r\n        <Form onSubmit={props.loadForecast}>\r\n            <Form.Group as={Row} controlId=\"formZipcode\">\r\n                <Col md=\"4\">\r\n                    <Form.Control type=\"text\" placeholder=\"Enter Zipcode\" name=\"zipcode\" required/>\r\n                </Col>\r\n                <Col md=\"4\">\r\n                    <Button type=\"submit\" variant=\"primary\">\r\n                        Get Weather\r\n                    </Button>\r\n                </Col>\r\n            </Form.Group>\r\n        </Form>\r\n    );\r\n};\r\n\r\nexport default ZipcodeForm;\r\n","import React from 'react';\r\nimport Table from 'react-bootstrap/Table'\r\nimport kelvinToFahrenheit from 'kelvin-to-fahrenheit'\r\n\r\nconst Forecast = (props) => {\r\n    var hasData = false\r\n    if (props.forecastData) {\r\n        hasData = true\r\n    }\r\n    return (\r\n        <div>\r\n            <h1>{props.city}</h1>\r\n            <Table striped hover>\r\n                <thead className=\"thead-dark\">\r\n                    <tr>\r\n                        <th>Date</th>\r\n                        <th>Temp</th>\r\n                        <th>Pressure</th>\r\n                    </tr>\r\n                </thead>\r\n                <tbody>\r\n                    {hasData ? (\r\n                        props.forecastData.map(day => (\r\n                            <tr>\r\n                                <td>{day.dt_txt}</td>\r\n                                <td>{kelvinToFahrenheit(day.main.temp)} Â°F</td>\r\n                                <td>{day.main.pressure}</td>\r\n                            </tr>\r\n                        ))\r\n                    ) : (\r\n                            <tr></tr>\r\n                        )}\r\n                    {/* <tr>\r\n                    <td>1</td>\r\n                    <td>Mark</td>\r\n                    <td>Otto</td>\r\n                </tr>\r\n                <tr>\r\n                    <td>2</td>\r\n                    <td>Jacob</td>\r\n                    <td>Thornton</td>\r\n                </tr> */}\r\n                </tbody>\r\n            </Table>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Forecast;\r\n","import React from 'react';\n\nimport Containter from 'react-bootstrap/Container';\nimport Row from 'react-bootstrap/Row';\nimport Col from 'react-bootstrap/Col';\n\nimport ZipcodeForm from './ZipcodeForm';\nimport Forecast from './Forecast';\n\nclass App extends React.Component {\n  getForecast = async (e) => {\n    try {\n      e.preventDefault();\n      const appid = '9e8da6d7dc2e655dd86de6f5a5483148'\n      const zipcode = e.target.elements.zipcode.value;\n      const api_call = await fetch(`https://api.openweathermap.org/data/2.5/forecast?zip=${zipcode},us&appid=${appid}`);\n      const response = await api_call.json();\n      if (zipcode) {\n        this.setState({\n          city: response.city.name,\n          list: response.list,\n          error: \"\",\n          isLoaded: true,\n        })\n      }\n      else {\n        this.setState({\n          error: \"Please enter a zipcode.\",\n          isLoaded: false,\n        })\n      }\n      console.log(response.list);\n    } catch (error) {\n      this.setState({\n        error: \"Not a valid zip code. Please try again\",\n        isLoaded: false,\n      })\n      window.alert(\"Not a valid zip code. Please try again.\");\n    }\n\n  }\n\n  state = {\n    city: undefined,\n    list: undefined,\n    error: undefined,\n    isLoaded: false,\n  }\n\n  render() {\n    return (\n      <Containter>\n        <Row>\n          <Col md=\"12\">\n            <ZipcodeForm loadForecast={this.getForecast} />\n          </Col>\n          {this.state.isLoaded ? (\n            <Col md=\"12\">\n              <Forecast city={this.state.city} forecastData={this.state.list} />\n            </Col>\n          ) : (<Col md=\"12\"></Col>\n            )}\n        </Row>\n      </Containter>\n    )\n  }\n}\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}